<?php
/* Generated by neoan3-cli */

namespace Neoan3\Model;


use Exception;
use Neoan3\Apps\Db;
use Neoan3\Apps\Ops;

class UserTransformer implements IndexTransformer
{
    static function uniqueUserName($input)
    {
        if (empty(Db::easy('user.id', ['user_name' => $input]))) {
            return $input;
        }
        throw new Exception('Username not unique');
    }

    static function uniqueEmail($input)
    {
        if (empty(Db::easy('user_email.id', ['email' => $input, '^delete_date']))) {
            return $input;
        }
        throw new Exception('Email not unique');
    }

    static function modelStructure($givenId = false)
    {
        $mainId = $givenId ? $givenId : Db::uuid()->uuid;
        return [
            'id'            => [
                'on_creation' => function ($input) use ($mainId) {
                    $mainId = $input ? $input : $mainId;
                    return '$' . $mainId;
                }
            ],
            'customer_id'   => [
                'on_creation' => function ($input) {
                    return $input ? '$' . $input : '';
                }
            ],
            'userName'     => [
                'translate'   => 'user_name',
                'required'    => true,
                'on_creation' => function ($input) {
                    return self::uniqueUserName($input);
                }
            ],
            'emails'    => [
                'translate'       => 'user_email',
                'depth'           => 'many',
                'required_fields' => ['email'],
                'on_creation'     => [
                    'user_id'      => function () use ($mainId) {
                        return '$' . $mainId;
                    },
                    'email'        => function ($input) {
                        return self::uniqueEmail($input);
                    },
                    'confirm_code' => function () {
                        return Ops::randomString(28);
                    }
                ]
            ],
            'password' => [
                'translate'       => 'user_password',
                'protection'      => 'hidden',
                'required'        => true,
                'required_fields' => ['password'],
                'depth'           => 'one',
                'on_creation'     => [
                    'user_id'      => function () use ($mainId) {
                        return '$' . $mainId;
                    },
                    'password'     => function ($input) {
                        return '=' . password_hash($input, PASSWORD_DEFAULT);
                    },
                    'confirm_code' => function () {
                        return Ops::randomString(28);
                    }
                ]
            ],
            'profile'  => [
                'depth'       => 'one',
                'required' => false,
                'translate' =>'user_profile',
                'on_creation' => [
                    'user_id' => function () use ($mainId) {
                        return '$' . $mainId;
                    },
                    'first_name' => function ($input){return $input ? $input : 'anonymous';}
                ]
            ],
            'roles'     => [
                'translate'       => 'user_role',
                'depth'           => 'many',
                'required_fields' => ['role'],
                'on_creation'     => [
                    'user_id' => function () use ($mainId) {
                        return '$' . $mainId;
                    }
                ]
            ],
        ];
    }
}
